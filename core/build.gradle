import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Tag
import org.ajoberstar.grgit.Commit
import org.ajoberstar.grgit.operation.FetchOp

plugins {
  id "java"
  id "maven"
  id "idea"
  id "signing"

  id "net.ltgt.apt" version "0.7"
  id "com.github.ben-manes.versions" version "0.13.0"
  id "de.fuerstenau.buildconfig" version "1.1.4"
  id "com.jfrog.bintray" version "1.7.1"
  id "org.ajoberstar.grgit" version "1.5.1"
}
apply from: rootProject.file("scripts/buildArtifacts.gradle")

group 'com.clarifai.clarifai-api2'

final Grgit git = Grgit.open()
version getVersionName(git)

def sensitiveFile = rootProject.file("sensitive.properties")
if (sensitiveFile.exists()) {
  final Properties sensitiveProperties = new Properties()
  sensitiveProperties.load(sensitiveFile.newReader())
  // Huge thanks to Cedric Beust for documenting these arcane and confusing options here:
  // http://beust.com/weblog/2015/07/13/the-long-and-arduous-road-to-jcenter-and-maven-bliss/

  // Why do we have to do this? I thought the plugin handled this for us... ¯\_(ツ)_/¯
  install {
    repositories.mavenInstaller {
      pom.project {
        name "Clarifai"
        description "Clarifai Java API Client"
        url 'https://github.com/googlesamples/easygoogle'
        inceptionYear "2016"

        groupId project.group
        artifactId project.name
        version project.version

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
        scm {
          url 'https://github.com/Clarifai/clarifai-java'
          connection 'https://github.com/Clarifai/clarifai-java.git'
        }
        developers {
          developer {
            name 'Clarifai, Inc.'
          }
        }
      }
    }
  }
  bintray {
    user = sensitiveProperties["jcenterUsername"]
    key = sensitiveProperties["jcenterApiKey"]

    publish = true
    configurations = ["archives"]

    pkg {
      userOrg = "clarifai"
      repo = "Clarifai"
      name = "Clarifai"
      desc = "Clarifai Java API client"

      licenses = ["Apache-2.0"]

      websiteUrl = "https://github.com/Clarifai/clarifai-java"
      issueTrackerUrl = "${websiteUrl}/issues"
      vcsUrl = "${websiteUrl}.git"

      version {
        name = project.version
        released = new Date()

        gpg { sign = true }

        mavenCentralSync {
          sync = true
          user = sensitiveProperties["sonatypeUsername"]
          password = sensitiveProperties["sonatypePassword"]
        }
      }
    }
  }
}
bintrayUpload.doFirst {
  if (git.branch.getCurrent().name != "master") {
    throw new GradleException("Should not publish new builds from any branch other than master!");
  }
  if (!git.status().isClean()) {
    throw new GradleException("Can't do an upload from an unclean git repo!")
  }
}


signing {
  required { gradle.taskGraph.hasTask("bintrayUpload") }
  sign configurations.archives
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_7
//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_7


buildConfig {
  packageName = "clarifai2"
  clsName = "BuildConfig"
}

dependencies {
  compile(
      "com.squareup.okhttp3:okhttp:$versions.okhttp",
      "com.google.code.gson:gson:2.7",
  )

  compileOnly(
      "com.jakewharton.auto.value:auto-value-annotations:$versions.autoValue",
      deps.nullityAnnotations,
      "com.github.kevinmost.auto-value-custom-hashcode-equals:adapter:$versions.customHashCodeEquals",
  )

  apt(
      "com.google.auto.value:auto-value:$versions.autoValue",
      "com.gabrielittner.auto.value:auto-value-with:1.0.0",
      "com.github.kevinmost.auto-value-custom-hashcode-equals:processor:$versions.customHashCodeEquals",
  )
}

// Our version names are the latest git tag in the repo if the current HEAD is that git tag (eg, "2.0.0-beta1")
// If the current HEAD is not that git tag, the commit-hash is appended to that tag (eg, "2.0.0-beta1-ab123fe4")
private String getVersionName(Grgit git) {
  if (version != "unspecified") { // For example, Jitpack just does this for us! Awesome.
    getLogger().println("Version param specified from gradle command-line: ${version}")
    return version
  }
  final Tag tag = getLatestGitTag(git)
  final Commit head = git.head()

  final String result;
  if (tag.commit.id == head.id) {
    result = tag.name
    getLogger().println("This is a tagged commit, the version will be the tag name: $result")
  } else {
    result = "${tag.name}-${head.getAbbreviatedId()}"
    getLogger().println("This is not a tagged commit, the version will be: ${result}")
  }
  return result
}

private static Tag getLatestGitTag(Grgit git) {
  git.remote.list().each {
    try {
      git.fetch(remote: it.name, tagMode: FetchOp.TagMode.ALL)
    } catch (Exception ignored) {
    }
  }
  git.tag.list().sort { -it.commit.time }.first()
}
